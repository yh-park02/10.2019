10월 2일 수업

**www.oracle.com에서 다운로드
11g, 12c 18c, 19c 버전이 있음
11g와 12c는 설치를 할 때 sid를 이용해서 설치 
18c, 19c는 설치를 할 때 service name을 이용해서 설치

sid는 오라클을 여러개 설치할 때 구분하기 위한 이름이다. 
중복된 이름은 안된다. 
기본이름은 orcl(standard 또는 enterprise버전)이나 xe(express 버전)
기존에 설치가 되어 있는데 또 설치하면 sid가 중복되서 다른 이름을 입력해야 한다. 
공부를 할 때는 sid를 변경하지 않지만 실무에서는 변경을 한다. 

기본포트는 1521번으로 설정된다. 이전에 다른 오라클이 설치되어 있으면 1씩 증가한다. 8080포트도 오라클이 사용한다.
오라클이 설치된 컴퓨터에서는 1521이나 8080을 함부로 사용하면 안된다. 
실무에서는 포트 번호도 변경을 한다. 

다른 데이터베이스와 달리 oracle이나 IBM DB2, Tibero는 개발자가
실무에서 설치할 가능선은 거의 없고 대부분은 판매한 기업에서 설치를 해준다. 비밀번호만 수정해서 사용한다. 
설치하는 운영체제도 Windows가 아니고 Linux나 Umix일 가능성이 높다.

=>설치를 하고 나면 확인은 콘솔에서 sqlplus라고 입력해서 접속도구가 실행되는지 system 계정으로 로그인이 되는지 확인한다. 

**Oracle, MySQL, MSSQL과 같은 프로그램은 부팅이 되면 자동 실행된다. 
=>서버라면 문제가 안되지만 공부를 위해서 데이터베이스를 설치한 경우 자동 실행되면 메모리를 많이 사용되어 메모리가 부족할 가능성이 생긴다. 
=>Windows의 경우는 서비스를 필요할 때만 실행하고 그렇지 않은 경우는 서비스를 중지해 두는 것이 좋다. 
=>오라클의 경우는 오라클 서비스와 TNS Listener이 있다. 
오라클 서비스는 오라클 자체를 중지하거나 실행시키는 것이고  TNS Listener는 외부에서 접속을 허용하는 서비스이다. 

**샘플 데이터 이용
=>계정의 lock을 해제
=>관리자계정은 sys와 system으로 제공
=>샘플계정은 scott과 hr이다. 
오라클 버전에 따라 scott이나 hr이 막혀있거나 없는 경우가 있다. 
11g에서는 막혀 있어서 scott이나 hr을 사용하려면 계정의 lock을 풀어줘야 한다. 
=>sys나 system으로 로그인을 한 후 
alter user scott identified by tiger account unlock
[사용자가 변경되었습니다.]
tiger는 비밀번호로 다른 것을 입력해도 된다. 

**데이터 베이스 접속 도구를 이용해서 접속 
=>오라클의 sqlplus는 오라클이 설치된 컴퓨터에서만 사용할 수 있고 commeand line기반이고 작업내용이 바로 반영된다. 
오라클이 설치되지 않은 컴퓨터나 oracle 명령어에 익숙하지 않은 사람이 사용하기에는 불편하다. 
[**기억***sqlplus에서 작업할 때는 메모장과 같은 editor에 sql을 입력하고 확인한 후 복사해서 실행해야 한다. ***기억***]
=>DBA(데이터베이스 관리자)를 제외하고는 sqlplus를 사용하지 않고 별도의 접속 프로그램을 이용해서 작업을 수행한다. 
=>오라클 접속도구는 많은데 금융에서 많이 사용하는 것은 toad, orange이고 공부를 할 때는 sqldeveloper(java로 만들어진 오라클에서 제공하는 프로그램)를 많이 사용한다. 우리는 dbeaver를 사용하는데 얘는 하나만 설치하면 오라클, mysql 등 여러가지 데이터베이스를 접속할 수 있어서 사용한다. 

**dbeaver를 이용한 오라클 접속
=>오라클 접속 드라이버 준비 : 오라클 웹 사이트에서 다운로드 받을 수 있고 오라클이 설치된 경우에는 오라클 설치 디렉토리에서 가져올수 있다. 
오라클 설치디렉토리에서 jdbc(java와 데이터베이스 연동 기술)디렉토리에 있다.[ C:\app\tjoeun-304\product\11.2.0\dbhome_1\jdbc\lib ]
드라이버에 붙는 숫자는 자바 버전이다.
지금은 6버전 이상을 사용한다. (14는 1.4버전이다.) 

**scott에 제공되는 샘플 테이블은 emp, dept, salgrade, bonus 테이블이 제공된다. 이 테이블을 확인, 왼쪽 창에서 테이블을 더블 클릭하면 테이블 구조가 grid로 보여진다. 
=>테이블의 구조를 확인하고 select 구문을 학습
number - 숫자
date, time, timestamp - 날짜 및 시간
clob - 긴 문자열
blob - 파일의 내용 : 바이트 배열
=>명령으로 확인할 때는 DESC 테이블이름;

**select 구문
기본 구조
SELECT * 또는 컬럼 이름나열
from 테이블 이름
WHERE조건

=>SELECT 와 FROM은 필수이고 WHERE은 선택
=>FROM 절의 테이블을 WHERE 는 행 단위로 분할(selection)하고 select는 열단위로 분할(projection)
=>테이블의 모든 컬럼을 확인할 때는 컬럼이름 대신에 *
=> 중복된 데이터를 제거할 때는 select 절의 맨앞에 distinct 기재

2.where 절의 조건
1) 크기 비교 연산자
>, >=, <, <= : 숫자, 날짜, 문자열 모두 크기 비교가 가능

2)동일성 여부 판단 연산자 
=(같다), != 또는 <> 다르다

3)문자열을 이용해서 날짜 만들기 
to_date('문자열','날짜서식')
y: 년도
mm : 월
dd :일
hh, hh24 : 시간
mi:분
ss:초

4)현재시간
sysdate

5)and 와 or를 이용해서 2개의 조건을 결합가능

6) between A and B
=> A와 B 사이로 A와 B를 포함한다.
=> A가 B보다 작거나 같아야 한다.

[예1]
--EMP테이블에서 SAL 값이 1000 -3000사이인 데이터의
--모든 컬럼을 조회 : BETWEEN을 이용
SELECT*
FROM EMP
WHERE SAL BETWEEN 1000 AND 3000; 

[예2]
--EMP 데이블에서 HIREDATE가 1981년에 속한 데이터의
--ENAME과  HIREDATE를 조회 : BETWEEN을 이용
SELECT ENAME, HIREDATE
FROM EMP
WHERE	HIREDATE BETWEEN TO_DATE('1981-01-01','YYYY-MM-DD')
	AND TO_DATE('1981-12-31','YYYY-MM-DD');

7) IN
IN(값의 리스트)를 이용하면 값의 리스트 안에 속한 모든 데이터가 리턴된다.
=>OR로 대테 가능한 경우가 있지만 값의 리스트가 sub query인 경우에는 or로 대체가 안됨
=>값의 리스트가 직접 입력한 값이면 or로 대체가능 

[예]
--EMP테이블에서 JOB이 CLERK이거나 SALESMAN인 데이터의 
--ENAME과 SAL의 값을 조회
SELECT ENAME, SAL
FROM EMP 
WHERE JOB = 'CLERK' OR JOB = 'SALESMAN';
	
SELECT ENAME, SAL
FROM EMP 
WHERE JOB IN ('CLERK','SALESMAN');	
--두개의 결과 값은 같음

=>SQL에서는 정답은 없고 원하는 결과만 나오면 답이 되는데 상황에 따라 속도가 다르므로 이 부분을 확인하자
[8 row(s) fetched - 0ms] 밑에서 시간을 확인가능하다. 


8) NULL 검색
IS NULL로 검색

[예]
--EMP테이블에서 COMM 컬럼의 값이 NULL인 테이터의 
--ENAME과 SAL, COMM을 조회하기
SELECT ENAME, SAL, COMM
FROM EMP
WHERE COMM IS NULL;

9) LIKE
=>부분 일치하는 데이터를 검색하는데 사용하는 연산자
=>WILDCARD 문자
_ : 하나의 글자와 대치
% : 글자 수 상관없이 대치 

___ : 3글자
A% : A로 시작하는 모든 문자열
%A : A로 끝나는 모든 문자열 

[예1]
--EMP테이블에서 ENAME이 J로 시작하는 데이터의 
--ENAME과 MGR을 조회
SELECT ENAME, MGR
FROM EMP
WHERE ENAME LIKE 'J%';

[예2]
--EMP테이블에서 ENAME에 LL이 포함된 데이터의 
--ENAME과 DEPTNO를 조회
SELECT ENAME, DEPTNO
FROM EMP
WHERE ENAME LIKE '%LL%';

[예3]
--EMP테이블에서 ENAME에 R로 끝나는 6자리의 이름을 가진 데이터의 
--ENAME과 DEPTNO를 조회
SELECT ENAME, DEPTNO
FROM EMP
WHERE ENAME LIKE '_____R';

10)검색 엔진은 검색할 때 공백을 기준으로 2개의 단어를 입력하면 2개의 단어가 포함된 데이터를 찾고 그리고 그 뒤에 한개의 단어만 포함된 데이터를 조회해서 붙임 

HELLO WORLD라고 입력
SPLIT을 해서 HELLO , WORLD로 분할

SEARCH LIKE '%HELLO%' AND '%WORLD%'

SEARCH LIKE '%HELLO%' 

SEARCH LIKE '%WORLD%'

11) NOT
NOT BETWEEN A AND B : A에서 B사이가 아닌
NOT IN(목록) : 목록에 속하지 않은
NOT LIKE '패턴' : 패턴과 일치하지 않은

IS NOT NULL : NULL이 아닌 데이터
[예]
--EMP테이블에서 COMM의 값이 NULL이 아닌 데이터의 
--ENAME과 JOB을 조회하기
SELECT ENAME, JOB
FROM EMP
WHERE COMM IS NOT NULL;


3. ORDER BY
=>SELECT 구문의 마지막 절이고 마지막에 실행
=>관계형 데이터베이스에 데이터를 저장하면 컬럼의 순서나 행의 순서는 아무런 의미가 없다. 
=>별도의 인덱싱(트라이나 B* TREE)을 이용해서 데이터를 저장하기 때문이다. 
=>2개 이상의 컬럼을 조회할 때는 SELECT 절에서 컬럼의 순서를 정해주는 것이 좋고 2개 이상의 행을 조회할 때는 ORDER BY를 이용해서 정렬조건을 설정해 주는 것이 좋다. 
=>정렬을 할 때는 
ORDER BY 컬럼이름이나 연산식 [ASC | DESC], 다른 정렬 조건
=>ASC는 오름차순 DESC는 내림차순인데 생략하면 ASC
정렬조건을 2개 이상 설정하면 앞의 조건이 동일한 경우 적용 
=>ORDER BY는 마지막에 수행되기 때문에 SELECT 절에서 만든 별명을 사용할 수 있다. 

[예1]
--EMP데이블의 데이터를 ENAME의 오름차순으로 정렬해서
--전부 출력하기 
SELECT *
FROM EMP
ORDER BY ENAME ASC;

[예2]
--EMP테이블의 데이터를 SAL*12 + COMM의 내림차순으로 정렬해서
--ENAME과 계산된 값을 출력하기
--COMM의 값이 NULL이면 0으로 간주
SELECT ENAME, SAL*12+NVL(COMM, 0)
FROM EMP
ORDER BY SAL*12+NVL(COMM, 0) DESC;
▼식을 바꿔도 결과값은 같음 (별명만듬)
SELECT ENAME, SAL*12+NVL(COMM, 0) AS 연봉
FROM EMP
ORDER BY 연봉 DESC;

=>컬럼 이름 대신에 SELECT 절에 입력한 컬럼의 순번을 설정해도 된다.
SELECT ENAME, SAL*12+NVL(COMM, 0) AS 연봉
FROM EMP
ORDER BY 2 DESC;

=>프로그래밍 언어는 인덱스가 0부터 시작하지만 데이터베이스는 인덱스가 1부터 시작한다. 


**연습문제 
1.EMP데이블에서 EMPNO가 7788인 데이터의 ENAME과 DEPTNO를 조회
SELECT ENAME, DEPTNO
FROM EMP
WHERE EMPNO = 7788;


2.EMP테이블에서 DEPRNO가 10 또는 20인 데이터의 모든 컬럼을 조회
단) HIREDATE의 내임차순으로 정렬 
SELECT* 
FROM EMP
WHERE DEPTNO = 10 OR DEPTNO = 20;
ORDER BY HIREDATE DESC;

SELECT* 
FROM EMP
WHERE DEPTNO = 20 OR DEPTNO = 10;
ORDER BY HIREDATE DESC;

SELECT* 
FROM EMP
WHERE DEPTNO IN(10,20);
ORDER BY HIREDATE DESC;

결과는 3개 모두 같다.


3.EMP테이블에서 COMM이 SAL보다 많은 데이터의 ENAM, SAL, COMM을 조회
SELECT ENAME, SAL, COMM
FROM EMP
WHERE COMM>SAL;

4.EMP테이블에서 ENAME에 L이 2개 이상 포함되어 있고 DEPTNO가 30인 데이터 또는 MGR이 7782인 데이터의 모든 컬럼을 조회 
SELECT*
FROM EMP
WHERE ENAME LIKE '%L%L%' AND DEPTNO=30 OR MGR = 7782;
AND와 OR의 우선순위가 다르기 때문에 잘보고 해야함 

5.BOARD테이블이 있고 이 테이블에서는 TITLE(제목)과 CONTENT(내용)컬럼이 존재 
=>BOARD 테이블에서 제목이나 내용에 이벤트라는 단어가 포함된 데이터의 모든 걸럼을 조회하는 SQL

SELECT *
FROM BOARD
WHRER TITLE LIKE '%이벤트%' OR CONTENT LIKE '%이벤트%';

**오라클에서 제공하는 함수(Maker Function)
=>데이터베이스에서는 함수가 반드시 리턴을 해야 한다. 
1) 함수의 종류
(1) 단일 행 함수 : 함수의 수행 결과가 1개인 함수
(2) 다중 행 함수 : 함수의 수행 결과가 1개 이상인 함수

---------------------------------------------------------------------------------------------
**데이터 분류
1.기본형과 참조형
기본형은 데이터의 값을 저장하고 참조형은 데이터의 참조를 저장 

2.최근에는 데이터의 개수에 따른 분류
1)scala data: 1개의 데이터
2)vector data : 0개 이상의 데이터 
=>1개의 데이터가 할 수 있는 작업이 있고 0개 이상의 데이터를 가지고 할 수 있는 작업이 다르기 때문이다.
/8787\
=3. 정형과 비정형
1)정형 : 모양이 일정한 데이터 - 테이블 구조로 만들어지는 데이터
2)비정형 : 모양이 일정하지 않은 데이터 - 음성이나 사운드처럼 테이블 구조로 만들기는 어렵고 행렬구조로 만드는 데이터
3)반정형 : 비정형처럼 생겼는데 정형으로 변환이 가능한 데이터 - 센서에서 수딥한 데이터 

---------------------------------------------------------------------------------------------
2) Dual :오라클에서 제공하는 가상 테이블
=>테이블에 존재하지 않는 데이터를 출력해 볼 목적으로 만든 테이블
=>SYSDATE는 현재 시간을 가지고 있는데 확인이 필요할 때는 DUAL테이블을 이용해야 한다. 왜냐하면 SYSDATE는 실제 테이블에 존재하지 않기 때문이다. 
=>SEQUENCE(일련변호)값을 확인할 때도 이용 

-현재시간 확인
SELECT SYSDATE
FROM DUAL;

3. 숫자관련함수
많이 쓰는 것 
=>행 단위로 작업해서 행의 개수만큼 리턴해주는 단일행 함수 
=>ROUND함수 : 반올림해주는 함수
ROUND(데이터, 자릿수)
자리수를 생략하면 소수 전체를 반올림
자릿수에 양수를 대입하면 양수에 해당하는 소수 자리까지 반올림을 해주고 음수를 대입하면 정수부분을 반올림 한다. 

[예]
--EMP테이블에서 ENAME과 SAL을 조회
SELECT ENAME, SAL
FROM EMP;

--SAL의 데이터를 소수 없이 표시
SELECT ENAME, ROUND(SAL,0)
FROM EMP;

--SAL의 값을 10자리 반올림
SELECT ENAME, ROUND(SAL,-2)
FROM EMP;

=>비슷한 역할을 수행하는 FLOOR, TRUNC라는 함수도 있다. 

FLOOR(올림)
TRUNC(버림)


4. 문자관련함수
=>영문자 비교할 때는 대소문자를 구분할 것인지 구분하지 않을 것인지 고민
=>CHAR를 사용했을 때 뒤의 공백 문제 고민 


1)LOWER와 UPPER : 모두 소문자나 대문자로 변경해주는 함수 
LOWER(데이터) :소문자로바꿔주는 함수 
UPPER(데이터) : 대문자로 바꿔주는 함수 
[예]
--EMP테이블에서 ENAME이 KING인 사원의
--ENAME과 JOB을 조회, 대소문자구분없이 조회
SELECT ENAME, JOB
FROM EMP
WHERE LOWER(ENAME) ='KING';


2)TRIM : 좌우공백을 제거해주는 함수
=>공백뿐 아니라 옵션으로 다른 문자를 대입해서 문자를 제거할 수도 있다. 
=>왼쪽이나 오른쪽에서만 제거하는 LTRIM과 RTRIM 함수도 존재한다. 
[예]
--'    CRACLE '에서 좌우 공백을 제거하고 조회
SELECT TRIM('-     CRACLE ')
FROM DUAL;

3)LENGTH, LENGTHB
=>문자열의 길이를 리턴하는 메소드인데 LENGTH는 글자의 개수를 LENGRH는 바이트수를 리턴
=>한글 1글자는 글자 수로는 1이지만 바이트 수로는 2나 3이 된다.
오라클에서는 보통의 경우는 2
바이트 UTF-8에서는 한글은 3BYTE 
테이블을 생성할 때 한글을 삽입하는 컴럼은 글자수*3해서 설정해야 한다. 

[예]
--한글이 글자수와 바이트의 수를 확인
SELECT LENGTH('안녕하세요'), LENGTHB('안녕하세요')
FROM DUAL;

4)SUBSTR, SUBSTRB
=>문자열에서 위치를 가지고 문자열을 분할해주는 함수 
=>매개변수로 숫자를 1개 또는 2개를 설정
=>1개 일 때는 시작위치 2개일 때는 시작위치와 가져올 개수
]다른언어나 데이터베이스에서 이런 함수를 사용할 때는 2번째 정수를 확인해야 한다,
프로그램에 따라 2번째 정수가 개수가 아니라 종료 다음 위치 인 경우가 있다. 
=>많은 양의 문자열이 있을 때 앞에서 몇개만 추출하고자 할 때 많이 사용한다. 
=>YES24처럼 도서에 대한 검색을 하게 되면 목차나 서평을 출력해주는데 이 항목들은 많은 문자열인데 모든 유저가 전부 이사실을 확인하지는 않는다.
이런경우에는 일부분만 가지고 가서 보여주고 클릭하면나중에 전체를 넘겨주면 된다. 
=>스마트폰의 경우는 화면이 작기 때문에 불필요한 데이터를 처음부터 가지고 가서 출력할 필요가 없다. 

--EMP테이블에서 ENAME의 첫 3글자만 조회
SELECT SUBSTR(ENAME, 1, 3)
FROM EMP;

5.형 변환 함수
수자 <-> 문자 <->날짜
1)TO_CHAR
=>숫지를 대입하면 문자로 변환
=>날짜를 대입할 때는 뒤에 변환서식을 지정
YYYY:년도를 4자리로
YY: 년도를 2자리로

MM : 월을 2자리로
MOM : 월을 영문자 약자로

DAY: 요일을 표현
DY : 요일을 약자로

DD: 일을 2자리러

HH:시간을 2자리로 표현 -12시간제
HH24 : 시간을 2자리로 표현 - 24시간제

MI : 분

SS: 초

=>개발자들은 날짜나 숫자를 문자로 변환하는 작업을 잘 하지 않는다,
개발자는 프로그래밍 언어를 통해서 데이터베이스를 사용하기 때문에 이러한 변환작업을 프로그램에서 할려고 한다. 

2)TO_DATE
=>문자열을 날짜로 변환 
TO_DATE('문자열', '날짜서식')

3)TO_NUMBER
=>문자열을 숫자로 변환

6.NVL
=>자바에서는 NULL과 연산을 하면 예외가 발생한다. 
=>데이터베이스에서는 NULL과 연산을 하게 되면 결과는 무조건 NULL이다.
=>데이터에 NULL이 있을 때 이 NULL을 치환하는 함수가 NVL
=>NVL(데이터,대체값): 데이터에 NULL이 있는 경우 대체값을 변환해서 수행 


**그룹함수 
=>여러개의 행을 가지고 연산해서 결과를 하나의 행으로 리턴하는 함수
=>집계함수하고도 한다. 
1.함수의 종류
1)SUM
2)AVG
3)COUNT
4)MAX
5)MIN
6)STDDEV : 표준편차
7)VARIANCE : 분산
=>표준편차나 분산을 구하는 이유는 데이터의 분포를 알아보기 위해서이다. 
=>그룹 함수는 GROUP BY 절에서 사용한 조건과 함께하는 경우가 아니라면 단독으로만 출력
=>그룹화하지 않은 컬럼과는 같이 출력할 수 없다. 

2.SUM은 합계
=>SUM에 대입된 컬럼 또는 연산식의 합계를 리턴하는 함수 

3.AVG는 평균
=>AVG는 NULL인 데이터는 제외하고 평균을 구함 

--EMP테이블에서 COMM의 합계와 평균 조회
--NVL을 사용하면 전체 데이터의 평균을 만들미나
--NVL을 사용하지 않으면 NULL이 아닌 데이터의 평균이 된다. 
SELECT SUM(COMM), AVG(COMM), AVG(NVL(COMM,0))
FROM EMP;

4.MAX, MIN
=>최대값과 최소값을 구해주는 함수 

5.COUNT
=>데이터의 개수를 구해주는 함수
=>NULL인 데이터를 제외하고 데이터의 개수를 구해준다. 
=>COUNT에는 컬럼이름 대신에 *을 넣는 경우가 있다.
전체 데이터 개수가 된다. 

[예]
--EMP테이블의 전체 데이터 개수와 COMM 컬럼의 데이터 개수 조회
SELECT COUNT(*), COUNT(COMM)
FROM EMP;

=>COUNT(*)의 경우는 테이블의 전체 개수 14가 나오지만 
 COUNT(COMM)의 경우는 COMM컬럼에서 NULL이 아닌 4개만 리턴

6. 집계함수와 일반 컬럼은 같이 조회할 수 없다. 

[예]
--EMP 테이블에서 SAL이 가장 큰 데이터의 ENAME과 SAL을 조회 :에러
--ENAME 컬럼은 그룹화 되어있지 않으므로 집계함수와 같이 출력을 못함
SELECT ENAME, MAX(SAL)
FROM EMP;

7.GROUP BY
=>SELECR 구문에서 데이터를 그룹화하기 위해 사용하는 절
4번 - SELECT *또는 조회할 컬럼이름 또는 연산식 나열
1번 - FROM 조회할 데이블 이름 나열
2번 - WHERE 조회할 조건 나열
3번 - GROUP BY 그룹화 할 컬럼이름 또는 연산식 나열 

5번 - ORDER BY 정렬할 컬럼이름 또는 연산식 [ASC|DESC]

*실행순서 기억해두기

[예문]
--EMP테이블에서 JOB의 중복을 제거하고 JOB을 출력
SELECT DISTINCT JOB
FROM EMP;

==둘의 결과는 같음

--JOB별로 구룹화를 하게 되면 JOB별로 묶이게 되서 중복은 자동적으로 제거가 된다.
SELECT JOB
FROM EMP
GROUP BY JOB;

--EMP테이블에서 JOB별로 SAL의 평균을 조회
SELECT JOB, ROUND(AVG(SAL))
FROM EMP
GROUP BY JOB
ORDER BY ROUND(AVG(SAL)) DESC;

--GROUP BY 절의 컬럼은 집계함수와만 같이 출력 
--다른 컬럼과는 같이 출력을 못한다. 
SELECT JOB, ENAME, ROUND(AVG(SAL))
FROM EMP
GROUP BY JOB
ORDER BY ROUND(AVG(SAL)) DESC;

8.HAVING
=>GROUP BY 이후의 조건 설정을 위한 절이다.
=>실행순서때문에 GROUP BY 이후의 조건을 WHERE에 기재할 수 없다. 
=>WHERE 절에는 집계함수를 사용할 수 없다. 
집계함수는 GROUP BY 이후에 수행 

[예]
--EMP테이블에서 JOB에 개수가 2개 이상인 데이터의 SAL의 평균을 구하기
--WHERE 절에는 집계함수를 사용할 수 없어서 에러
SELECT JOB, ROUND(AVG(SAL))
FROM EMP
WHERE COUNT(JOB) >= 2
GROUP BY JOB
ORDER BY ROUND(AVG(SAL)) DESC;
--------------------------------------------

SELECT JOB, ROUND(AVG(SAL))
FROM EMP
GROUP BY JOB
HAVING COUNT(JOB) >= 2
ORDER BY ROUND(AVG(SAL)) DESC;

*기억하기*
5번 SELECT
1번 FROM
2번 WHERE
3번 GROUP BY
4번 HAVING
6번 ORDER BY
=>이 순서를 기억해서 데이터를 필터링 하려고 할 때는 되도록 앞에서 필터링을 해야 한다. 



**연습문제
1. EMP 테이블에서 JOB별 인원 수를 조회
SELECT JOB, COUNT(JOB)
FROM EMP
GROUP BY JOB;

2. EMP테이블에서 HIREDATE에서 년도가 동일한 인원수를 조회
SELECT TO_CHAR(HIREDATE, 'YYYY'), COUNT(*)
FROM EMP
GROUP BY TO_CHAR(HIREDATE, 'YYYY');
=> TO_CHAR 함수를 이용해서 년도만 가져온 후 그룹화해서 해결
=> SUBSTR을 이용해도 되는데 이 때는 날짜가 저장된 서식을 알아야 한다. 
=>년도와 월을 그룹화 하는 것을 많이 한다. 
-------------------------------------------------------------------------------------
*JOIN
=>2개의 테이블을 하나의 테이블로 합치는 것 
=>FROM 절에 테이블 이름을 2개 이상 기재하면 JOIN이 발생한다.

1.Cartesian Prodect : cross Join
=>FROM절에 테이블 이름을 2개 이상 기재하고 JOIN 조건이 없는 경우 
=>2개 테이블의 모든 조합을 가지고 하나의 테이블을 생성
=>열의 개수는 양쪽 테이블의 열의 개수의 합 
=>행의 개수는 양쪽 테이블의 행의 개수의 곱
1)EMP테이블 확인
SELECT *
FROM EMP;
- 8의 열과 14개의 행으로 구성

2)DEPT테이블
SELECT *
FROM DEPT;
-3개의 열과 4개의 행으로 구성 

3)EMP테이블과 DEPT 테이블의 모든 조합
SELECT*
FROM EMP, DEPT;
-11개의 열과 56개의 행으로 구성 


2.Equi Join
=>2개 테이블의 공통된 의미를 지닌 컬럼들의 값을 =로 비교해서 일치하는 데이터만 JOIN하는 것 
=>WHERE 절에 동일한 의미의 컬럼의 값이 같다라는 조건을 추가한다. 
=>양쪽테이블의 컬럼의 이름이 같다면 구분하기 위해서 컬럼이름 앞에 테이블 이름을 적어준다. 

[예]
--EMP테이블에는 DEPTNO컬럼이 부서번호를 나타내는 컬럼이고 
DEPT체이블에서 CEPTNO 컬럼이 부서 번호를 나타내는 컬럼이다. 

--EMP테이블과 DEPT테이블에서 DEPTNO가 동일한 데이터만 조회하기
SELECT*
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

=>회원테이블에 아이디와 이름이 있고 게시판 테이블에서 작성자 아이디가 있고 게시글 정보가 있는 경우 게시글 정보와 이름을 같이 출력할 때 회원테이블과 게시판테이블의 아이디를 가지고 조인해서 데이터를 생성해야 한다. 

3. 테이블 이름에 별명사용
=>FORM 절에서 테이블 이름을 기재할 때 한칸 공백을 주고 별명을 입력하면 되고 이후에는 데이블이름 대신에 별명을 사용한다. 

SELECT*
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;
=>별명을 부여하게 되면 이후에는 별명만 사용해야 한다. 
=>별명을 사용하는 이유에는 2가지가 있는데 코드를 줄여서 사용하기 위한 경우가 있고 코드를 알아보기 쉽게 하기 위한 경우도 있다. 
프로그래밍에서 FINAL FIELD 나 ENUM을 사용하는 경우가 별명을 사용하는 것과 동일한 목적
스레드의 우선 순위는 1부터 10까지 있다.
static final int MAX_PRIORITY = 10

우선순위 설정할 때 10이나 MAX_PRIORITY로 설정가능 



4.Non Equi Join
=>join을 할 때 =가 아닌 다른 연산자를 사용해서 join

5.Inner Join
=>양쪽 모두에 존재하는 데이터만 join에 참여 

6.outer join
=>어느 한쪽에만 존재하는 데이터도 join에 참여

7.Self Join
=>동일한 테이블끼리 joind
=>하나의 테이블에 동일한 의미를 갖는 컬럼이 2개 이상인 경우 사용 
-----여기까지 표준

8.natural join
=>기존 join을 좀 더 쉽게 하기 위해 추가된 문법

9.ANSI Join
=>목적은 natural join과 같음 
ANSI : 미국 표준 협회에서 추가한 문법

-----------------여기까지 join 외우기(취업)-------------------------------------
 




























